// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type DashboardMenus struct {
	SidebarTop    *Menu `json:"sidebarTop"`
	SidebarBottom *Menu `json:"sidebarBottom"`
}

type Error struct {
	String string `json:"string"`
	Status int    `json:"status"`
}

type FloatFilter struct {
	Comparison ComparisonType `json:"comparison"`
	And        *FloatFilter   `json:"and"`
	Or         *FloatFilter   `json:"or"`
	Value      *float64       `json:"value"`
}

type IntFilter struct {
	Comparison ComparisonType `json:"comparison"`
	And        *IntFilter     `json:"and"`
	Or         *IntFilter     `json:"or"`
	Value      *int           `json:"value"`
}

type Menu struct {
	Items []*MenuItem `json:"items"`
}

type MenuItem struct {
	Name  *string `json:"name"`
	Icon  *string `json:"icon"`
	Route *string `json:"route"`
}

type Pagination struct {
	CurrentPage  *int `json:"currentPage"`
	PrevPage     *int `json:"prevPage"`
	NextPage     *int `json:"nextPage"`
	TotalItems   *int `json:"totalItems"`
	ItemsPerPage *int `json:"itemsPerPage"`
}

type PatientFilter struct {
	ID                  *string         `json:"ID"`
	FirstName           *StringFilter   `json:"FirstName"`
	LastName            *StringFilter   `json:"LastName"`
	Address             *StringFilter   `json:"Address"`
	DateOfBirth         *StringFilter   `json:"DateOfBirth"`
	Ethnicity           *StringFilter   `json:"Ethnicity"`
	Phn                 *StringFilter   `json:"Phn"`
	PrimaryRenalDisease *StringFilter   `json:"PrimaryRenalDisease"`
	Weight              *FloatFilter    `json:"Weight"`
	Height              *FloatFilter    `json:"Height"`
	Sex                 *StringFilter   `json:"Sex"`
	MaritalStatus       *StringFilter   `json:"MaritalStatus"`
	ContactNo           *StringFilter   `json:"ContactNo"`
	PersonType          *StringFilter   `json:"PersonType"`
	And                 *UserListFilter `json:"and"`
	Or                  *UserListFilter `json:"or"`
}

type PersonList struct {
	Persons    []*Person   `json:"persons"`
	Pagination *Pagination `json:"pagination"`
}

type StringFilter struct {
	Comparison ComparisonType `json:"comparison"`
	And        *StringFilter  `json:"and"`
	Or         *StringFilter  `json:"or"`
	Value      *string        `json:"value"`
}

type User struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type UserList struct {
	Users      []*User     `json:"users"`
	Pagination *Pagination `json:"pagination"`
}

type UserListFilter struct {
	ID   *StringFilter   `json:"id"`
	Name *StringFilter   `json:"name"`
	And  *UserListFilter `json:"and"`
	Or   *UserListFilter `json:"or"`
}

type UserLogin struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type UserToken struct {
	Token string `json:"token"`
	Error *Error `json:"error"`
	User  *User  `json:"user"`
}

type ComparisonType string

const (
	ComparisonTypeEqual              ComparisonType = "EQUAL"
	ComparisonTypeNotEqual           ComparisonType = "NOT_EQUAL"
	ComparisonTypeGreaterThan        ComparisonType = "GREATER_THAN"
	ComparisonTypeGreaterThanOrEqual ComparisonType = "GREATER_THAN_OR_EQUAL"
	ComparisonTypeLessThan           ComparisonType = "LESS_THAN"
	ComparisonTypeLessThanOrEqual    ComparisonType = "LESS_THAN_OR_EQUAL"
	ComparisonTypeBetween            ComparisonType = "BETWEEN"
	ComparisonTypeContains           ComparisonType = "CONTAINS"
	ComparisonTypeNotContains        ComparisonType = "NOT_CONTAINS"
	ComparisonTypeStartsWith         ComparisonType = "STARTS_WITH"
	ComparisonTypeEndsWith           ComparisonType = "ENDS_WITH"
)

var AllComparisonType = []ComparisonType{
	ComparisonTypeEqual,
	ComparisonTypeNotEqual,
	ComparisonTypeGreaterThan,
	ComparisonTypeGreaterThanOrEqual,
	ComparisonTypeLessThan,
	ComparisonTypeLessThanOrEqual,
	ComparisonTypeBetween,
	ComparisonTypeContains,
	ComparisonTypeNotContains,
	ComparisonTypeStartsWith,
	ComparisonTypeEndsWith,
}

func (e ComparisonType) IsValid() bool {
	switch e {
	case ComparisonTypeEqual, ComparisonTypeNotEqual, ComparisonTypeGreaterThan, ComparisonTypeGreaterThanOrEqual, ComparisonTypeLessThan, ComparisonTypeLessThanOrEqual, ComparisonTypeBetween, ComparisonTypeContains, ComparisonTypeNotContains, ComparisonTypeStartsWith, ComparisonTypeEndsWith:
		return true
	}
	return false
}

func (e ComparisonType) String() string {
	return string(e)
}

func (e *ComparisonType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ComparisonType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ComparisonType", str)
	}
	return nil
}

func (e ComparisonType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
