type PersonMedicalHistory {
    ID: ID
    Person: Person!
    Description: String
    Reason: String
    StartDate: String
    EndDate: String
    Medications: String
    Type: HistoryType
}
input PersonMedicalHistoryFilter {
    ID: StringFilter
    Person: PersonFilter
    Description: String
    Reason: String
    StartDate: String
    EndDate: String
    Medications: String
    Type: HistoryType
}
enum HistoryType {
    COMPLAINT
    MEDICAL
    SURGICAL
    SOCIAL
}

input PersonMedicalHistoryInput{
    ID: ID
    Person: PersonInput!
    Description: String
    Reason: String
    StartDate: String
    EndDate: String
    Medications: String
    Type: HistoryType!
}
extend type Person {
    histories(filter: PersonFilter,page:Int,limit:Int)              : PersonMedicalHistoryList
}
type PersonMedicalHistoryList {
    histories: [PersonMedicalHistory]
    pagination: Pagination
}

extend type Mutation {
    createPersonMedicalHistory(input: PersonMedicalHistoryInput!): PersonMedicalHistory
    updatePersonMedicalHistory(input: PersonMedicalHistoryInput!): PersonMedicalHistory
    deletePersonMedicalHistory(ID: ID!): PersonMedicalHistory
}
extend type Query {
    personMedicalHistory(ID: ID!): PersonMedicalHistory
    personMedicalHistorys(PersonID: ID!,filter: PersonFilter,page:Int,limit:Int): PersonMedicalHistoryList
}