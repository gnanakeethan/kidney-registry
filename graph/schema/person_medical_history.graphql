type PersonMedicalHistory {
    ID: ID
    Person: Person!
    Description: String
    Reason: String
    StartDate: String
    EndDate: String
    Medications: String
    Type: HistoryType
    CreatedAt: String
    UpdatedAt: String
}
input PersonMedicalHistoryFilter {
    ID                     : StringFilter
    Person                 : PersonFilter
    Description            : StringFilter
    Reason                 : StringFilter
    StartDate              : StringFilter
    EndDate                : StringFilter
    Medications            : StringFilter
    Type                   : StringFilter
    and                    : PersonMedicalHistoryFilter
    andNot                 : PersonMedicalHistoryFilter
    or                     : PersonMedicalHistoryFilter
    orNot                  : PersonMedicalHistoryFilter
}
enum HistoryType {
    COMPLAINT
    MEDICAL
    SURGICAL
    SOCIAL
}

input PersonMedicalHistoryInput{
    ID: ID
    Person: PersonInput!
    Description: String
    Reason: String
    StartDate: String
    EndDate: String
    Medications: String
    Type: HistoryType!
}
extend type Person {
    histories(filter: PersonMedicalHistoryFilter, page:Int, limit:Int)              : PersonMedicalHistoryList
}
type PersonMedicalHistoryList {
    histories: [PersonMedicalHistory]
    pagination: Pagination
}

extend type Mutation {
    createPersonMedicalHistory(input: PersonMedicalHistoryInput!): PersonMedicalHistory
    updatePersonMedicalHistory(input: PersonMedicalHistoryInput!): PersonMedicalHistory
    deletePersonMedicalHistory(ID: ID!): ID
}
extend type Query {
    personMedicalHistory(ID: ID!): PersonMedicalHistory
    listPersonMedicalHistories(PersonID: ID!,filter: PersonMedicalHistoryFilter,page:Int,limit:Int): PersonMedicalHistoryList
}