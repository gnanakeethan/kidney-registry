type PersonExamination implements Node & DynamicFormInterface @hasPermissionAgainst(action: "read",type: "PersonExaminationObject") {
    ID : ID!
    Examination : Examination
    Person: Person
    Description: String
    Details: FormDetails
    Results: ExaminationResults
    Procedure: Procedure
    CreatedAt: String
    UpdatedAt:String
    DeletedAt: String
}
input PersonExaminationInput {
    ID : ID
    Description: String
    Results: ExaminationResults
    Examination : ExaminationInput
    Person: PersonInput
}

scalar ExaminationResults

input PersonExaminationFilter {
    Examination : ExaminationFilter
    Person: PersonFilter
    FollowUpId: StringFilter
    CreatedAt: StringFilter
    UpdatedAt: StringFilter
    DeletedAt: StringFilter
}
type PersonExaminationList implements Connection{
    items: [PersonExaminationEdge]
    pagination: Pagination
}

type PersonExaminationEdge implements Edge{
    node: PersonExamination
    cursor: Pagination
}
extend type Mutation {
    createPersonExamination(input: PersonExaminationInput!): PersonExaminationEdge
    updatePersonExamination(input: PersonExaminationInput!): PersonExaminationEdge
    deletePersonExamination(ID: ID!): ID
}
extend type Query {
    getPersonExamination(ID: ID!): PersonExaminationEdge
    listPersonExaminations(PersonID: ID!,filter: PersonExaminationFilter,page:Int,limit:Int,sortBy:[String], orderBy:[OrderBy]): Connection
    listAllPersonExaminations(filter: PersonExaminationFilter,page:Int,limit:Int,sortBy:[String], orderBy:[OrderBy]): Connection
}