type PersonExamination implements DynamicFormInterface{
    ID : ID!
    Examination : Examination
    Person: Person
    Description: String
    Details: FormDetails
    Results: ExaminationResults
    Procedure: Procedure
    CreatedAt: String
    UpdatedAt:String
    DeletedAt: String
}
input PersonExaminationInput {
    ID : ID!
    Description: String
    Results: ExaminationResults
    ExaminationId : ID!
    FollowUpId: ID
}

scalar ExaminationResults

input PersonExaminationFilter {
    ExaminationId: StringFilter
    FollowUpId: StringFilter
    CreatedAt: StringFilter
    UpdatedAt: StringFilter
    DeletedAt: StringFilter
}
type PersonExaminationList {
    items: [PersonExamination]
    pagination: Pagination
}
extend type Mutation {
    createPersonExamination(input: PersonExaminationInput!): PersonExamination
    updatePersonExamination(input: PersonExaminationInput!): PersonExamination
    deletePersonExamination(ID: ID!): ID
}
extend type Query {
    #    listPersonMedicalHistories(PersonID: ID!,filter: PersonMedicalHistoryFilter,page:Int,limit:Int,sortBy:[String], orderBy:[OrderBy]): PersonMedicalHistoryList
    listPersonExaminations(PersonID: ID!,filter: PersonExaminationFilter,page:Int,limit:Int,sortBy:[String], orderBy:[OrderBy]): PersonExaminationList
}