type PersonExamination {
    ID : ID!
    Description: String
    Details: ExaminationDetails
    Results: ExaminationResults
    ExaminationId : ID!
    Procedure: ExaminationProcedure
    FollowUpId: ID
    CreatedAt: String
    UpdatedAt:String
    DeletedAt: String
}

scalar ExaminationResults

input PersonExaminationFilter {
    ExaminationId: StringFilter
    FollowUpId: StringFilter
    CreatedAt: StringFilter
    UpdatedAt: StringFilter
    DeletedAt: StringFilter
}
type PersonExaminationList {
    items: [PersonExamination]
    pagination: Pagination
}
extend type Query {
    #    listPersonMedicalHistories(PersonID: ID!,filter: PersonMedicalHistoryFilter,page:Int,limit:Int,sortBy:[String], orderBy:[OrderBy]): PersonMedicalHistoryList
    listPersonExaminations(PersonID: ID!,filter: PersonExaminationFilter,page:Int,limit:Int,sortBy:[String], orderBy:[OrderBy]): PersonExaminationList
}