type Person implements Node @hasPermissionAgainst(action: "read",type:"PersonObject") {
    ID                     : ID!
    FirstName              : String
    LastName               : String
    Address                : String
    DateOfBirth            : String
    Ethnicity              : String
    Phn                    : String
    PrimaryRenalDisease    : String
    Weight                 : Float
    Height                 : Float
    Gender                 : Gender
    MaritalStatus          : MaritalStatus
    ContactNo              : String
    PersonType             : PatientType
    Status                 : PatientStatus
    RecordStatus           : RecordStatus
    Age                    : String
    CreatedAt              : String
    UpdatedAt              : String
    BloodGroup             : BloodGroup
    Examinations(filter: PersonExaminationFilter,page:Int,limit:Int,sortBy:[String], orderBy:[OrderBy]): Connection
    Investigations(filter: PersonInvestigationFilter,page:Int,limit:Int,sortBy:[String], orderBy:[OrderBy]): Connection
    FollowUps(filter: PersonFollowUpFilter,page:Int,limit:Int,sortBy:[String], orderBy:[OrderBy]): Connection
    MedicalHistory(filter: PersonMedicalHistoryFilter,page:Int,limit:Int,sortBy:[String], orderBy:[OrderBy]): Connection
    OrganDonations(filter: PersonOrganDonationFilter,page:Int,limit:Int,sortBy:[String], orderBy:[OrderBy]): Connection
    Workup(filter: PersonWorkupFilter,page:Int,limit:Int,sortBy:[String], orderBy:[OrderBy]): Connection
}
enum Gender {
    MALE
    FEMALE
    OTHER
    NA
}
enum MaritalStatus {
    SINGLE
    MARRIED
    DIVORCED
    NA
}
enum PatientType {
    DONOR
    RECIPIENT
    NA
}
enum PatientStatus {
    ACTIVE
    INACTIVE
    NA
    WORKING_UP
    SUSPENDED
    PERMANENTLY_UNFIT
    DECEASED_WILL_AWAITING_TRANSPLANT
    DECEASED_POST_CADAVERIC_TRANSPLANT
    RECEIVED_LIVE_TRANSPLANT
    CADAVERIC_DONOR
    LIVE_DONOR
}
enum RecordStatus {
    DRAFT
    PUBLISHED
    REMOVED
}
enum BloodGroup {
    A_POS
    A_NEG
    B_POS
    B_NEG
    O_POS
    O_NEG
    AB_POS
    AB_NEG
    NA
}
type PersonList implements Connection{
    items: [PersonEdge]
    pagination: Pagination
}
type PersonEdge implements Edge {
    node: Person
}
input PersonComparison {
    comparison: ComparisonType!
    value: String
}
input PersonFilter {
    ID                     : StringFilter
    FirstName              : StringFilter
    LastName               : StringFilter
    Address                : StringFilter
    DateOfBirth            : StringFilter
    Ethnicity              : StringFilter
    Phn                    : StringFilter
    PrimaryRenalDisease    : StringFilter
    Weight                 : FloatFilter
    Height                 : FloatFilter
    Gender                 : StringFilter
    MaritalStatus          : StringFilter
    Status: StringFilter
    ContactNo              : StringFilter
    PersonType             : StringFilter
    and                    : PersonFilter
    andNot                 : PersonFilter
    or                     : PersonFilter
    orNot                  : PersonFilter
}

input PersonInput {
    ID                     : ID!
    Age                    : String
    FirstName              : String
    LastName               : String
    Address                : String
    DateOfBirth            : String
    Ethnicity              : String
    Phn                    : String
    PrimaryRenalDisease    : String
    Weight                 : Float
    Height                 : Float
    Gender                 : Gender
    MaritalStatus          : MaritalStatus
    ContactNo              : String
    PersonType             : PatientType
    Status                 : PatientStatus
    RecordStatus           : RecordStatus
    BloodGroup             : BloodGroup
    CreatedAt              : String
    UpdatedAt              : String
}

extend type Query {
    listPatients(filter: PersonFilter,page:Int,limit:Int,sortBy:[String], orderBy:[OrderBy]) : PersonList
    getPatient(ID: ID!) : PersonEdge
}

extend type Mutation {
    newPatient: PersonEdge
    updatePatient(input:PersonInput) : PersonEdge
    addPatient(input:PersonInput) : PersonEdge
}