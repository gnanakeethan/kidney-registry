type Person {
    ID                     : ID
    FirstName              : String
    LastName               : String
    Address                : String
    DateOfBirth            : String
    Ethnicity              : String
    Phn                    : String
    PrimaryRenalDisease    : String
    Weight                 : Float
    Height                 : Float
    Gender                 : Gender
    MaritalStatus          : MaritalStatus
    ContactNo              : String
    PersonType             : PatientType
    Status                 : PatientStatus
    RecordStatus           : RecordStatus
    followUps              : FollowUpList
    Age                    : String
}
enum Gender {
    MALE
    FEMALE
    OTHER
    N_A
}
enum MaritalStatus {
    SINGLE
    MARRIED
    DIVORCED
    N_A
}
enum PatientType {
    DONOR
    RECIPIENT
    N_A
}
enum PatientStatus {
    ACTIVE
    INACTIVE
    N_A
}
enum RecordStatus {
    DRAFT
    PUBLISHED
    REMOVED
    N_A
}
type FollowUpList {
    followUps: [FollowUp]
    pagination: Pagination
}
type FollowUp {
    ID               : ID
    ClinicNo         : String
    Description      : String
    Person           : Person
    Complaints       : String
    RenalBiopsies    : String
    CaseStatus       : String
}
type PersonList {
    persons: [Person!]!
    pagination: Pagination
}

input PatientFilter {
    ID                     : ID
    FirstName              : StringFilter
    LastName               : StringFilter
    Address                : StringFilter
    DateOfBirth            : StringFilter
    Ethnicity              : StringFilter
    Phn                    : StringFilter
    PrimaryRenalDisease    : StringFilter
    Weight                 : FloatFilter
    Height                 : FloatFilter
    Gender                 : StringFilter
    MaritalStatus          : StringFilter
    ContactNo              : StringFilter
    PersonType             : StringFilter
    and                    : PatientFilter
    andNot                 : PatientFilter
    or                     : PatientFilter
    orNot                  : PatientFilter
}

input PatientInput {
    ID                     : ID!
    FirstName              : String!
    LastName               : String!
    Address                : String!
    DateOfBirth            : String!
    Ethnicity              : String!
    Phn                    : String!
    PrimaryRenalDisease    : String!
    Weight                 : Float!
    Height                 : Float!
    Gender                 : Gender!
    MaritalStatus          : MaritalStatus!
    ContactNo              : String!
    PersonType             : PatientType!
    Status                 : PatientStatus!
    RecordStatus           : RecordStatus!
}

extend type Query {
    listPatients(filter: PatientFilter,page:Int,limit:Int) : PersonList
    getPatient(ID: ID!) : Person
}

extend type Mutation {
    newPatient: Person
    updatePatient(input:PatientInput) : Person
}