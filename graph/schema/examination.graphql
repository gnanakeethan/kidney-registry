type Examination {
    ID          : ID!
    Details   : ExaminationDetails
    Procedure : ExaminationProcedure
    Order: Int
    CreatedAt: String
    UpdatedAt: String
    DeletedAt: String
}
type ExaminationDetails {
    Name: String
    Description:String
    Inline: Boolean
}
input ExaminationDetailsInput {
    Name: String
    Description:String
}
type Attributes {
    id: String
    max: Int
    min: Int
    step: Int
    type: String
    label: String
    disabled: Boolean
    classes: String
    labelClasses: String
    fieldName: String
    image: String
}
input AttributesInput {
    id: String
    max: Int
    min: Int
    step: Int
    type: String
    label: String
    disabled: Boolean
    classes: [String]
}

type Prefix {
    classes: [String ]
}
input PrefixInput {
    classes: [String ]
}
type Items {
    id: String
    name: String
    title: String
    value: String
}
input ItemsInput {
    id: String
    name: String
    title: String
    value: String
}

type Extra {
    items: [Items ]
}
input ExtraInput {
    items: [ ItemsInput ]
}
type Fields {
    name: String
    type: String
    value: String
    attributes: Attributes
    prefix: Prefix
    extra: Extra
}
input FieldsInput {
    name: String
    type: String
    value: String
    attributes: AttributesInput
    prefix: PrefixInput
    extra: ExtraInput
}

type ExaminationProcedure {
    fields: [Fields ]
}
input ExaminationProcedureInput {
    fields: [FieldsInput]
}
input ExaminationFilter {
    Order: IntFilter
}
type ExaminationList {
    items: [Examination]
    pagination: Pagination
}

extend type Query {
    getExamination(id: ID!): Examination
    #    listPersonMedicalHistories(PersonID: ID!,filter: PersonMedicalHistoryFilter,page:Int,limit:Int,sortBy:[String], orderBy:[OrderBy]): PersonMedicalHistoryList
    listExaminations(filter: ExaminationFilter,page:Int,limit:Int,sortBy:[String], orderBy:[OrderBy]): ExaminationList
}