type Examination implements DynamicFormInterface & Node{
    ID          : ID!
    Details   : FormDetails
    Procedure : Procedure
    Order: Int
    CreatedAt: String
    UpdatedAt: String
    DeletedAt: String
}
type ExaminationEdge implements Edge {
    node: Examination
    cursor: Pagination
}
input ExaminationInput{
    ID          : ID!
    Details   : FormDetailsInput
    Procedure : ProcedureInput
    Order: Int
    CreatedAt: String
    UpdatedAt: String
    DeletedAt: String
}

input ExaminationFilter {
    Order: IntFilter
}
type ExaminationList implements Connection {
    items: [ExaminationEdge]
    pagination: Pagination
}

extend type Query {
    getExamination(id: ID!): ExaminationEdge @hasPermission(action: "read", object: "Examination")
    listExaminations(filter: ExaminationFilter,page:Int,limit:Int,sortBy:[String], orderBy:[OrderBy]): Connection
}