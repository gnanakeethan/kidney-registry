type User implements Node {
    ID: ID!
    Name: String!
    Roles: [Role!]!
}
input UserInput {
    ID: ID!
}
type Role {
    ID: ID!
    Name: String!
}

type UserRole {
    user: User!
    role: Role!
}


type UserEdge implements Edge {
    node: User!
    cursor: Pagination
}

type UserList implements Connection{
    items: [UserEdge]
    pagination: Pagination
}

input UserFilter {
    id : StringFilter
    name: StringFilter
    email: StringFilter
    and: UserFilter
    or: UserFilter
}


extend type Query {
    users(filter: UserFilter,page:Int,limit:Int,sortBy:[String], orderBy:[OrderBy]): UserList
}