type PersonFollowUp {
    ID: String!
    ClinicNo: String
    Description: String
    Complaints: String
    RenalBiopsies: String
    CaseStatus: String
    DialysisPlan: DialysisPlan
    OtherFindings: String
    Referrals: String
    ConsultantOpinion: String
    Person: Person
    Donation: PersonOrganDonation
}
input DialysisPlanInput {
    Type: String
    Plan: String
    Frequency: String
}
type DialysisPlan {
    Type: String
    Plan: String
    Frequency: String

}

input PersonFollowUpInput{
    ID: String!
    ClinicNo: String
    Description: String
    Complaints: String
    RenalBiopsies: String
    CaseStatus: String
    DialysisPlan: DialysisPlanInput
    OtherFindings: String
    Referrals: String
    ConsultantOpinion: String
    Person: PersonInput!
    Donation: PersonOrganDonationInput!
    Medicines: [PersonFollowUpMedicineInput]
}
input PersonFollowUpMedicineInput{
    ID: String!
    MedicineCode: String
    Name: String
    Dosage: String
    Frequency: String
    Duration: String
    StartDate: String
    EndDate: String
}
type PersonFollowUpMedicine{
    ID: String!
    MedicineCode: String
    Name: String
    Dosage: String
    Frequency: String
    Duration: String
    StartDate: String
    EndDate: String
}

extend type Person {
    followUps(filter: PersonFilter,page:Int,limit:Int,sortBy:[String], orderBy:[OrderBy])              : PersonFollowUpList
}
type PersonFollowUpList {
    followUps: [PersonFollowUp]
    pagination: Pagination
}

extend type Mutation {
    createPersonFollowUp(input: PersonFollowUpInput!): PersonFollowUp
    #    updatePersonFollowUp(input: PersonFollowUpInput!): PersonFollowUp
    #    deletePersonFollowUp(ID: ID!): PersonFollowUp
}
extend type Query {
    personFollowUp(ID: ID!): PersonFollowUp
    personFollowUps(PersonID: ID!,filter: PersonFilter,page:Int,limit:Int,sortBy:[String], orderBy:[OrderBy]): PersonFollowUpList
}