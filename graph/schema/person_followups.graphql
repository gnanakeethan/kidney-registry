type PersonFollowUp implements Node{
    ID: ID!
    Description: String
    Complaints: String
    CaseStatus: String
    DialysisPlan: DialysisPlan
    OtherFindings: String
    Referrals: String
    ConsultantOpinion: String
    Person: Person
    Donation: PersonOrganDonation
    CreatedAt: String
    UpdatedAt: String
}
input PersonFollowUpFilter {
    ID: StringFilter
    Description: StringFilter
    Complaints: StringFilter
    CaseStatus: StringFilter
    OtherFindings: StringFilter
    Referrals: StringFilter
    ConsultantOpinion: StringFilter
    Person: PersonFilter
    Donation: PersonOrganDonationFilter
}
input DialysisPlanInput {
    Type: String
    Plan: String
    Frequency: String
}
type DialysisPlan {
    Type: String
    Plan: String
    Frequency: String

}

input PersonFollowUpInput{
    ID: String!
    Description: String
    Complaints: String
    CaseStatus: String
    DialysisPlan: DialysisPlanInput
    OtherFindings: String
    Referrals: String
    ConsultantOpinion: String
    Person: PersonInput!
    Donation: PersonOrganDonationInput
    Medicines: [PersonFollowUpMedicineInput]
}
input PersonFollowUpMedicineInput{
    ID: String!
    MedicineCode: String
    Name: String
    Dosage: String
    Frequency: String
    Duration: String
    StartDate: String
    EndDate: String
}
type PersonFollowUpMedicine{
    ID: String!
    MedicineCode: String
    Name: String
    Dosage: String
    Frequency: String
    Duration: String
    StartDate: String
    EndDate: String
}

#extend type Person {
#    followUps(filter: PersonFilter,page:Int,limit:Int,sortBy:[String], orderBy:[OrderBy])              : PersonFollowUpList
#}
type PersonFollowUpList implements Connection{
    items: [PersonFollowUpEdge]
    pagination: Pagination
}

type PersonFollowUpEdge implements Edge{
    node: PersonFollowUp
    cursor: Pagination
}

extend type Mutation {
    createPersonFollowUp(input: PersonFollowUpInput!): PersonFollowUpEdge
    updatePersonFollowUp(input: PersonFollowUpInput!): PersonFollowUpEdge
    #    deletePersonFollowUp(ID: ID!): PersonFollowUp
}
extend type Query {
    getPersonFollowUp(ID: ID!): PersonFollowUpEdge
    listPersonFollowUps(PersonID: ID!,filter: PersonFollowUpFilter,page:Int,limit:Int,sortBy:[String], orderBy:[OrderBy]): Connection
    listAllPersonFollowUps(filter: PersonFollowUpFilter,page:Int,limit:Int,sortBy:[String], orderBy:[OrderBy]): Connection
}